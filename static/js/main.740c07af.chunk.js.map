{"version":3,"sources":["utils/Utils.js","components/Board.js","components/WonGame.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["generateRandomNumbers","rows","cols","gameTiles","amountOfItemsInArray","length","tileNumber","Math","floor","random","indexOf","push","checkIfFinished","array","counter","i","gridCols","concat","Board","state","selectedTile","initialArray","shuffle","generateBoard","map","key","flipId","id","className","onClick","handleTileSelection","e","tileNum","target","textContent","setState","moveTile","num","parseInt","tilesArr","index","indexOfZero","props","arrayCopy","slice","splice","setFinished","finishedGame","gameFinished","numbersArray","this","flipKey","style","gridTemplateColumns","nextProps","prevState","React","Component","WonGame","Game","finished","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.740c07af.chunk.js","sourcesContent":["export const generateRandomNumbers =(rows, cols)=>{\r\n    let gameTiles = [];\r\n    const amountOfItemsInArray = rows * cols;\r\n\r\n    //generate unique tile numbers in random order\r\n    while(gameTiles.length < amountOfItemsInArray){\r\n        let tileNumber = Math.floor(Math.random() * amountOfItemsInArray);\r\n        if(gameTiles.indexOf(tileNumber) === -1){\r\n            gameTiles.push(tileNumber)\r\n        };\r\n    }\r\n    return gameTiles;\r\n};\r\n\r\n\r\nexport const checkIfFinished = (array) => {\r\n    let counter;\r\n    for(var i = 0; i < array.length - 1; i++){\r\n        counter = i + 1;\r\n        if(array[i] !== counter){\r\n            return false;\r\n        }\r\n    }\r\n   return true;\r\n};\r\n\r\nexport const gridCols = (cols) => { //add styling to fit the grid\r\n    let gridCols = '';\r\n    for(let i = 0; i < cols; i++){\r\n        if(i === 0){\r\n            gridCols = gridCols.concat('auto');\r\n        }else if(i === cols - 1){\r\n            gridCols = gridCols.concat(' auto');\r\n        }else{\r\n            gridCols = gridCols.concat(' auto ');\r\n        }\r\n    }\r\n    return gridCols;\r\n}","import React from 'react';\r\nimport {checkIfFinished, gridCols} from '../utils/Utils';\r\nimport {Flipper, Flipped} from 'react-flip-toolkit';\r\n\r\nclass Board extends React.Component {\r\n    \r\n     state = {\r\n        gameTiles: [],\r\n        selectedTile: '',\r\n        initialArray: [],\r\n        shuffle: false\r\n    }\r\n    \r\n    generateBoard = () => {\r\n        let tiles = this.state.gameTiles;\r\n        const displayTiles = tiles.map((tileNumber)=>\r\n            <Flipped key={tileNumber} flipId={tileNumber}>\r\n                <div id={'Tile'+tileNumber} className=\"gameTile\" onClick={this.handleTileSelection}>\r\n                    <p>{tileNumber}</p> \r\n                </div>\r\n            </Flipped>\r\n        );\r\n        return(\r\n            displayTiles\r\n        );\r\n    }\r\n\r\n    handleTileSelection = (e) => { \r\n        var tileNum = e.target.textContent;\r\n        if(tileNum !== '0'){\r\n            this.setState({\r\n                selectedTile: tileNum\r\n            }, ()=>{\r\n                this.moveTile();\r\n            });\r\n        }\r\n    }\r\n\r\n    moveTile = () => {\r\n        let num = parseInt(this.state.selectedTile, 10);\r\n        let tilesArr = this.state.gameTiles;\r\n        let index = tilesArr.indexOf(num);\r\n        let indexOfZero = tilesArr.indexOf(0);\r\n        let cols = this.props.cols;\r\n\r\n        if(index !== -1 && (index - 1 === indexOfZero || index + 1 === indexOfZero ||index + cols === indexOfZero || index - cols === indexOfZero )) {\r\n            const arrayCopy = tilesArr.slice();\r\n            arrayCopy.splice(index, 1, arrayCopy.splice(indexOfZero, 1, arrayCopy[index])[0]); //insert \"empty tile\" into the place where the selectedTile was\r\n            \r\n            this.setState({\r\n                gameTiles: arrayCopy,\r\n                shuffle: !this.state.shuffle\r\n            },()=>{\r\n                this.setFinished();\r\n            }); \r\n        } \r\n    }\r\n\r\n    setFinished = () => {\r\n        let finishedGame = checkIfFinished(this.state.gameTiles);\r\n        this.setState({\r\n            finishedGame: finishedGame\r\n        });\r\n        this.props.gameFinished(finishedGame);\r\n    }\r\n\r\n    componentDidMount(){\r\n        let numbersArray = this.props.numbersArray;\r\n        this.setState({\r\n            gameTiles: numbersArray,\r\n            initialArray: numbersArray\r\n        });\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState){\r\n         if(nextProps.numbersArray !== prevState.initialArray){\r\n            return{\r\n                initialArray: nextProps.numbersArray,\r\n                gameTiles: nextProps.numbersArray,\r\n                shuffle: !prevState.shuffle  //toggle shuffle at user btn press\r\n            };\r\n        } else{\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Flipper flipKey={this.state.shuffle}>\r\n                    <div className=\"gameBoardContainer\" style={{gridTemplateColumns:gridCols(this.props.cols)}}>\r\n                        {this.generateBoard()}\r\n                    </div>\r\n                </Flipper>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\nconst WonGame = (props) => {\r\n\r\n    if(props.gameFinished){\r\n        return(\r\n            <div>\r\n                <h4>Congratulations! You did it!</h4>\r\n            </div>\r\n        );\r\n    }else{\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WonGame;","import React from 'react';\r\nimport Board from './Board';\r\nimport WonGame from './WonGame';\r\nimport {generateRandomNumbers} from '../utils/Utils';\r\n\r\nclass Game extends React.Component {\r\n    \r\n    state = {\r\n        gameFinished: false,\r\n        rows: 4,\r\n        cols: 4,\r\n        numbersArray: []\r\n    } \r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            numbersArray: generateRandomNumbers(this.state.rows, this.state.cols)\r\n        });\r\n    }                              \r\n\r\n    gameFinished = (finished) => {\r\n        if(finished){\r\n            this.setState({\r\n                gameFinished: true\r\n            });\r\n        }else if(!finished){\r\n            this.setState({\r\n                gameFinished: false\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Puzzle Game Deluxe</h1>\r\n                <p>Get the numbers in order from 1 to 15 to succeed</p>\r\n                <Board cols={this.state.cols} gameFinished={this.gameFinished} numbersArray={this.state.numbersArray}/>\r\n                <WonGame gameFinished={this.state.gameFinished} />\r\n                <button onClick={ (e)=>{this.setState({numbersArray: generateRandomNumbers(this.state.rows, this.state.cols)})} }>Shuffle</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}